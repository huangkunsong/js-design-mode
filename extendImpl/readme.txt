此部分非设计模式,为基础扩展
JS中实现继承的方式
    1：类继承：
        子类的prototype为父类实例。
        缺点：子类实例修改一个父类的引用类型属性都会影响到所有的子类
    2：构造函数继承：
        在子类构造函数中调用父类的构造函数并设置上下文为子类
        缺点：每个子类的实现都是新构建父类属性,违背了代码复用的原则。
    3：组合继承：
        将类继承和构造函数继承2种方式进行组合,
        子类prototype为父类实例,并在子类构造函数中调用父类构造函数,获得父类实例属性。
        缺点：会调用2次父类构造函数,子类prototype一次,子类构造函数一次。
              如果父类构造函数复杂,会造成无谓的开销。
